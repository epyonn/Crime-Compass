{"ast":null,"code":"// Import the configureStore function from Redux Toolkit.\n// This function simplifies the process of creating a Redux store with various configurations and middleware.\nimport{configureStore}from'@reduxjs/toolkit';// Import the combineReducers function from the redux library.\n// This function is used to combine multiple reducer functions into a single reducer function.\nimport{combineReducers}from'redux';// Import the formReducer which handles actions related to the form.\n// This reducer will update the state based on dispatched actions.\nimport formReducer from'./reducer';// Use combineReducers to create a single rootReducer.\n// Currently, we only have one slice of state (form) managed by formReducer.\n// As the app grows, we can add more slices of state and manage them with different reducers.\nconst rootReducer=combineReducers({form:formReducer});// Create the Redux store.\n// The store holds the complete state of the app.\n// The rootReducer is passed to the store, so it knows how to handle actions and update the state.\nconst store=configureStore({reducer:rootReducer});// Export the store so it can be used in other parts of the app.\n// Specifically, it will be used in the main entry file (like index.tsx) to wrap the app with the Provider component.\nexport default store;","map":{"version":3,"names":["configureStore","combineReducers","formReducer","rootReducer","form","store","reducer"],"sources":["/Users/davisnguyen/projects/crimecompass/frontend/src/redux/store.ts"],"sourcesContent":["// Import the configureStore function from Redux Toolkit.\n// This function simplifies the process of creating a Redux store with various configurations and middleware.\nimport { configureStore } from '@reduxjs/toolkit';\n\n// Import the combineReducers function from the redux library.\n// This function is used to combine multiple reducer functions into a single reducer function.\nimport { combineReducers } from 'redux';\n\n// Import the formReducer which handles actions related to the form.\n// This reducer will update the state based on dispatched actions.\nimport formReducer from './reducer';\n\n// Use combineReducers to create a single rootReducer.\n// Currently, we only have one slice of state (form) managed by formReducer.\n// As the app grows, we can add more slices of state and manage them with different reducers.\nconst rootReducer = combineReducers({\n    form: formReducer\n});\n\n// Create the Redux store.\n// The store holds the complete state of the app.\n// The rootReducer is passed to the store, so it knows how to handle actions and update the state.\nconst store = configureStore({\n    reducer: rootReducer\n});\n\n// Export the store so it can be used in other parts of the app.\n// Specifically, it will be used in the main entry file (like index.tsx) to wrap the app with the Provider component.\nexport default store;\n"],"mappings":"AAAA;AACA;AACA,OAASA,cAAc,KAAQ,kBAAkB,CAEjD;AACA;AACA,OAASC,eAAe,KAAQ,OAAO,CAEvC;AACA;AACA,MAAO,CAAAC,WAAW,KAAM,WAAW,CAEnC;AACA;AACA;AACA,KAAM,CAAAC,WAAW,CAAGF,eAAe,CAAC,CAChCG,IAAI,CAAEF,WACV,CAAC,CAAC,CAEF;AACA;AACA;AACA,KAAM,CAAAG,KAAK,CAAGL,cAAc,CAAC,CACzBM,OAAO,CAAEH,WACb,CAAC,CAAC,CAEF;AACA;AACA,cAAe,CAAAE,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}