{"ast":null,"code":"var _jsxFileName = \"/Users/davisnguyen/projects/crimecompass/frontend/src/components/CrimeMap.tsx\",\n  _s = $RefreshSig$();\n// Import packages\nimport React, { useState, useEffect } from 'react';\nimport { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';\nimport { useDispatch } from 'react-redux';\nimport { setLocation } from '../redux/actions';\nimport '../styles/CrimeMap.css';\nimport ReportForm from '../components/ReportForm';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mapStyles = [{\n  featureType: \"poi\",\n  elementType: \"labels\",\n  stylers: [{\n    visibility: \"off\"\n  }],\n  disableDoubleClickZoom: true,\n  // Add this line\n  clickableIcons: false\n}];\nconst CrimeMap = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [markerPosition, setMarkerPosition] = useState(null);\n  const [address, setAddress] = useState(\"\"); // String or null value, will be initialized to null when app starts\n  const [map, setMap] = useState(null);\n  const [mapCenter, setMapCenter] = useState({\n    lat: 37.8044,\n    lng: -122.2712\n  }); // Initial center\n  const [locations, setLocations] = useState([]);\n  const [isGoogleMapsLoaded, setIsGoogleMapsLoaded] = useState(false);\n  const geocodeLatLng = async (lat, lng) => {\n    const geocoder = new google.maps.Geocoder();\n    const latlng = {\n      lat,\n      lng\n    };\n    return new Promise((resolve, reject) => {\n      geocoder.geocode({\n        location: latlng\n      }, (results, status) => {\n        if (status === \"OK\") {\n          if (results && results[0]) {\n            resolve(results[0].formatted_address);\n          } else {\n            reject(\"No results found\");\n          }\n        } else {\n          reject(\"Geocoder failed due to: \" + status);\n        }\n      });\n    });\n  };\n\n  // Fetch Locations\n  // Use useEffect to fetch data when the component mounts.\n\n  // Use useEffect to fetch data when the component mounts.\n  useEffect(() => {\n    // Define an async function to fetch locations from the server.\n    const fetchLocations = async () => {\n      try {\n        // Make a GET request to the server to retrieve the collection.\n        const response = await axios.get('http://localhost:5038/todoappcollection');\n        // Extract the location strings from the response data.\n        const locationStrings = response.data.map(item => item.location);\n\n        // Initialize the geocoder object.\n        const geocoder = new google.maps.Geocoder();\n        // Iterate over each location string to geocode them.\n        for (const locationString of locationStrings) {\n          // Use the geocoder to convert the address to lat/lng coordinates.\n          geocoder.geocode({\n            address: locationString\n          }, (results, status) => {\n            if (status === 'OK' && results !== null && results !== void 0 && results[0]) {\n              console.log('Geocoded String');\n              // If geocoding is successful, get the location from the results.\n              const {\n                location\n              } = results[0].geometry;\n              // Update the locations state with the new coordinates.\n              setLocations(prevLocations => [...prevLocations, {\n                lat: location.lat(),\n                lng: location.lng()\n              }]);\n            } else {\n              // Log an error if geocoding was not successful.\n              console.error('Geocode was not successful for the following reason:', status);\n            }\n          });\n        }\n      } catch (error) {\n        // Log any errors that occur during the fetch.\n        console.error(\"Error fetching locations:\", error);\n      }\n    };\n\n    // Call the function to fetch locations.\n    fetchLocations();\n  }, []);\n  const handleMapClick = async event => {\n    const latitude = event.latLng.lat();\n    const longitude = event.latLng.lng();\n    const newCenter = {\n      lat: latitude,\n      lng: longitude\n    };\n    setMapCenter(newCenter);\n    setMarkerPosition({\n      lat: latitude,\n      lng: longitude\n    });\n    map === null || map === void 0 ? void 0 : map.panTo(new google.maps.LatLng(latitude, longitude));\n    try {\n      const fetchedAddress = await geocodeLatLng(latitude, longitude); // Using await here\n      setAddress(fetchedAddress);\n      dispatch(setLocation(fetchedAddress));\n    } catch (error) {\n      console.error(\"Error getting address:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"crime-map-wrapper\",\n    children: /*#__PURE__*/_jsxDEV(LoadScript, {\n      googleMapsApiKey: 'AIzaSyCLu25wqirs0pAPnvjvH4hV4Se7Kcpzmps',\n      onLoad: () => setIsGoogleMapsLoaded(true),\n      children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n        mapContainerClassName: \"crime-map-container\",\n        center: mapCenter // Default center (San Francisco)\n        ,\n        zoom: 13,\n        onClick: handleMapClick,\n        onLoad: map => setMap(map),\n        options: {\n          styles: mapStyles,\n          disableDoubleClickZoom: true,\n          mapTypeControl: false,\n          clickableIcons: false\n        },\n        children: [/*#__PURE__*/_jsxDEV(ReportForm, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 21\n        }, this), locations.map((location, index) => /*#__PURE__*/_jsxDEV(Marker, {\n          position: location\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 9\n  }, this);\n};\n_s(CrimeMap, \"3AOgQqR4I0wwxkfo/vzcnRDxX9w=\", false, function () {\n  return [useDispatch];\n});\n_c = CrimeMap;\nexport default CrimeMap;\n\n//  {markerPosition && <Marker position={markerPosition} />}\n// Issues to fix after lunch. Fix how it looks in mobile. \n// Setup Database\n// Check for anymore other errors when using. \n// Retype each line of code so you remember how to use it. \nvar _c;\n$RefreshReg$(_c, \"CrimeMap\");","map":{"version":3,"names":["React","useState","useEffect","GoogleMap","LoadScript","Marker","useDispatch","setLocation","ReportForm","axios","jsxDEV","_jsxDEV","mapStyles","featureType","elementType","stylers","visibility","disableDoubleClickZoom","clickableIcons","CrimeMap","_s","dispatch","markerPosition","setMarkerPosition","address","setAddress","map","setMap","mapCenter","setMapCenter","lat","lng","locations","setLocations","isGoogleMapsLoaded","setIsGoogleMapsLoaded","geocodeLatLng","geocoder","google","maps","Geocoder","latlng","Promise","resolve","reject","geocode","location","results","status","formatted_address","fetchLocations","response","get","locationStrings","data","item","locationString","console","log","geometry","prevLocations","error","handleMapClick","event","latitude","latLng","longitude","newCenter","panTo","LatLng","fetchedAddress","className","children","googleMapsApiKey","onLoad","mapContainerClassName","center","zoom","onClick","options","styles","mapTypeControl","fileName","_jsxFileName","lineNumber","columnNumber","index","position","_c","$RefreshReg$"],"sources":["/Users/davisnguyen/projects/crimecompass/frontend/src/components/CrimeMap.tsx"],"sourcesContent":["// Import packages\nimport React, { useState, useEffect } from 'react';\nimport { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';\nimport { useDispatch } from 'react-redux';\nimport { setLocation } from '../redux/actions';\nimport '../styles/CrimeMap.css';\nimport ReportForm from '../components/ReportForm';\nimport axios from 'axios';\n\nconst mapStyles = [\n    {\n        featureType: \"poi\",\n        elementType: \"labels\",\n        stylers: [\n            { visibility: \"off\"}\n        ],\n        disableDoubleClickZoom: true,  // Add this line\n        clickableIcons: false,\n\n    }\n];\n\nconst CrimeMap: React.FC = () => {\n    const dispatch = useDispatch();\n    const [markerPosition, setMarkerPosition] = useState<{ lat: number, lng: number } | null>(null);\n    const [address, setAddress] = useState<string | null>(\"\"); // String or null value, will be initialized to null when app starts\n    const [map, setMap] = useState<google.maps.Map | null>(null);\n\n    const [mapCenter, setMapCenter] = useState({ lat: 37.8044, lng: -122.2712 }); // Initial center\n    const [locations, setLocations] = useState<{ lat: number, lng: number}[]>([]);\n\n    const [isGoogleMapsLoaded, setIsGoogleMapsLoaded] = useState(false);\n\n    const geocodeLatLng = async (lat: number, lng: number) => {\n        const geocoder = new google.maps.Geocoder();\n        const latlng = { lat, lng };\n        return new Promise<string>((resolve, reject) => {\n            geocoder.geocode({ location: latlng }, (results, status) => {\n                if (status === \"OK\") {\n                    if (results && results[0]) {\n                        resolve(results[0].formatted_address);\n                    } else {\n                        reject(\"No results found\");\n                    }\n                } else {\n                    reject(\"Geocoder failed due to: \" + status);\n                }\n            });\n        });\n    };\n\n    // Fetch Locations\n    // Use useEffect to fetch data when the component mounts.\n\n\n    \n  // Use useEffect to fetch data when the component mounts.\n  useEffect(() => {\n    \n    // Define an async function to fetch locations from the server.\n    const fetchLocations = async () => {\n      try {\n        // Make a GET request to the server to retrieve the collection.\n        const response = await axios.get('http://localhost:5038/todoappcollection');\n        // Extract the location strings from the response data.\n        const locationStrings = response.data.map((item: any) => item.location);\n\n        // Initialize the geocoder object.\n        const geocoder = new google.maps.Geocoder();\n        // Iterate over each location string to geocode them.\n        for (const locationString of locationStrings) {\n          // Use the geocoder to convert the address to lat/lng coordinates.\n          geocoder.geocode({ address: locationString }, (results, status) => {\n            if (status === 'OK' && results?.[0]) {\n            console.log('Geocoded String')\n              // If geocoding is successful, get the location from the results.\n              const { location } = results[0].geometry;\n              // Update the locations state with the new coordinates.\n              setLocations(prevLocations => [...prevLocations, { lat: location.lat(), lng: location.lng() }]);\n            } else {\n              // Log an error if geocoding was not successful.\n              console.error('Geocode was not successful for the following reason:', status);\n            }\n          });\n        }\n      } catch (error) {\n        // Log any errors that occur during the fetch.\n        console.error(\"Error fetching locations:\", error);\n      }\n    };\n\n    // Call the function to fetch locations.\n    fetchLocations();\n  }, []);\n\n    \n\n\n\n\n    \n\n\n    const handleMapClick = async (event: any) => {\n        const latitude = event.latLng.lat();\n        const longitude = event.latLng.lng();\n        const newCenter = {lat: latitude, lng:longitude};\n        setMapCenter(newCenter);\n        setMarkerPosition({ lat: latitude, lng: longitude });\n\n        map?.panTo(new google.maps.LatLng(latitude, longitude));\n    \n        try {\n            const fetchedAddress = await geocodeLatLng(latitude, longitude); // Using await here\n            setAddress(fetchedAddress);\n            dispatch(setLocation(fetchedAddress))\n\n        } catch (error) {\n            console.error(\"Error getting address:\", error);\n        }\n    };\n    \n\n    return (\n        <div className=\"crime-map-wrapper\">\n            <LoadScript googleMapsApiKey={'AIzaSyCLu25wqirs0pAPnvjvH4hV4Se7Kcpzmps'} onLoad={() => setIsGoogleMapsLoaded(true)}>\n                \n                <GoogleMap\n                    mapContainerClassName=\"crime-map-container\"\n                    center={mapCenter} // Default center (San Francisco)\n                    zoom={13}\n                    onClick={handleMapClick}\n                    onLoad={map => setMap(map)}\n                    options={{ \n                        styles: mapStyles, \n                        disableDoubleClickZoom: true,\n                        mapTypeControl: false,\n                        clickableIcons: false,\n                    }}\n                >\n                    <ReportForm/>\n\n\n                    {locations.map((location, index) => (\n                        <Marker key={index} position={location} />\n                    ))}\n                </GoogleMap>\n            </LoadScript>\n\n        </div>\n    )\n}\nexport default CrimeMap;\n\n//  {markerPosition && <Marker position={markerPosition} />}\n// Issues to fix after lunch. Fix how it looks in mobile. \n// Setup Database\n// Check for anymore other errors when using. \n// Retype each line of code so you remember how to use it. "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}