[{"/Users/davisnguyen/projects/crimecompass/frontend/src/index.tsx":"1","/Users/davisnguyen/projects/crimecompass/frontend/src/App.tsx":"2","/Users/davisnguyen/projects/crimecompass/frontend/src/redux/store.ts":"3","/Users/davisnguyen/projects/crimecompass/frontend/src/redux/reducer.ts":"4","/Users/davisnguyen/projects/crimecompass/frontend/src/components/CrimeMap.tsx":"5","/Users/davisnguyen/projects/crimecompass/frontend/src/redux/actions.ts":"6","/Users/davisnguyen/projects/crimecompass/frontend/src/components/ReportForm.tsx":"7"},{"size":397,"mtime":1698883221710,"results":"8","hashOfConfig":"9"},{"size":258,"mtime":1698897169873,"results":"10","hashOfConfig":"9"},{"size":1327,"mtime":1698884650642,"results":"11","hashOfConfig":"9"},{"size":655,"mtime":1698890661098,"results":"12","hashOfConfig":"9"},{"size":6091,"mtime":1699317642190,"results":"13","hashOfConfig":"9"},{"size":544,"mtime":1698890470436,"results":"14","hashOfConfig":"9"},{"size":4951,"mtime":1699311343982,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1gh51db",{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},"/Users/davisnguyen/projects/crimecompass/frontend/src/index.tsx",[],[],"/Users/davisnguyen/projects/crimecompass/frontend/src/App.tsx",["40"],[],"import React from 'react';\nimport CrimeMap from './components/CrimeMap'; \nimport ReportForm from './components/ReportForm'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CrimeMap />\n\n\n    </div>\n  );\n}\n\nexport default App;\n","/Users/davisnguyen/projects/crimecompass/frontend/src/redux/store.ts",[],[],"/Users/davisnguyen/projects/crimecompass/frontend/src/redux/reducer.ts",[],[],"/Users/davisnguyen/projects/crimecompass/frontend/src/components/CrimeMap.tsx",["41"],[],"// Import packages\nimport React, { useState, useEffect } from 'react';\nimport { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setLocation } from '../redux/actions';\nimport '../styles/CrimeMap.css';\nimport ReportForm from '../components/ReportForm';\nimport axios from 'axios';\n\nconst mapStyles = [\n    {\n        featureType: \"poi\",\n        elementType: \"labels\",\n        stylers: [\n            { visibility: \"off\"}\n        ],\n        disableDoubleClickZoom: true,  // Add this line\n        clickableIcons: false,\n\n    }\n];\n\nconst CrimeMap: React.FC = () => {\n    const dispatch = useDispatch();\n    const [markerPosition, setMarkerPosition] = useState<{ lat: number, lng: number } | null>(null);\n    const [address, setAddress] = useState<string | null>(\"\"); // String or null value, will be initialized to null when app starts\n    const [map, setMap] = useState<google.maps.Map | null>(null);\n\n    const [mapCenter, setMapCenter] = useState({ lat: 37.8044, lng: -122.2712 }); // Initial center\n    const [locations, setLocations] = useState<{ lat: number, lng: number}[]>([]);\n\n    const [isGoogleMapsLoaded, setIsGoogleMapsLoaded] = useState(false);\n\n    const date = useSelector((state: any) => state.form.date);\n\n\n    const geocodeLatLng = async (lat: number, lng: number) => {\n        const geocoder = new google.maps.Geocoder();\n        const latlng = { lat, lng };\n        return new Promise<string>((resolve, reject) => {\n            geocoder.geocode({ location: latlng }, (results, status) => {\n                if (status === \"OK\") {\n                    if (results && results[0]) {\n                        resolve(results[0].formatted_address);\n                    } else {\n                        reject(\"No results found\");\n                    }\n                } else {\n                    reject(\"Geocoder failed due to: \" + status);\n                }\n            });\n        });\n    };\n\n    // Fetch Locations\n    // Use useEffect to fetch data when the component mounts.\n\n\n    \n  // Use useEffect to fetch data when the component mounts.\n  useEffect(() => {\n    if (isGoogleMapsLoaded) {\n        // Define an async function to fetch locations from the server.\n        const fetchLocations = async () => {\n        try {\n            // Make a GET request to the server to retrieve the collection.\n            const response = await axios.get('http://localhost:5038/todoappcollection');\n            // Extract the location strings from the response data.\n            const locationStrings = response.data.map((item: any) => item.location);\n\n            // Initialize the geocoder object.\n            const geocoder = new google.maps.Geocoder();\n            // Iterate over each location string to geocode them.\n            for (const locationString of locationStrings) {\n            // Use the geocoder to convert the address to lat/lng coordinates.\n            geocoder.geocode({ address: locationString }, (results, status) => {\n                if (status === 'OK' && results?.[0]) {\n                console.log('Geocoded String')\n                // If geocoding is successful, get the location from the results.\n                const { location } = results[0].geometry;\n                // Update the locations state with the new coordinates.\n                setLocations(prevLocations => [...prevLocations, { lat: location.lat(), lng: location.lng() }]);\n                } else {\n                // Log an error if geocoding was not successful.\n                console.error('Geocode was not successful for the following reason:', status);\n                }\n            });\n            }\n        } catch (error) {\n            // Log any errors that occur during the fetch.\n            console.error(\"Error fetching locations:\", error);\n        }\n        };\n\n        fetchLocations();\n    }\n    // Call the function to fetch locations.\n    \n  }, [isGoogleMapsLoaded, date]);\n\n    \n\n\n\n\n    \n\n\n    const handleMapClick = async (event: any) => {\n        const latitude = event.latLng.lat();\n        const longitude = event.latLng.lng();\n        const newCenter = {lat: latitude, lng:longitude};\n        setMapCenter(newCenter);\n        setMarkerPosition({ lat: latitude, lng: longitude });\n\n        map?.panTo(new google.maps.LatLng(latitude, longitude));\n    \n        try {\n            const fetchedAddress = await geocodeLatLng(latitude, longitude); // Using await here\n            setAddress(fetchedAddress);\n            dispatch(setLocation(fetchedAddress))\n\n        } catch (error) {\n            console.error(\"Error getting address:\", error);\n        }\n    };\n    \n\n    return (\n        <div className=\"crime-map-wrapper\">\n            <LoadScript googleMapsApiKey={'AIzaSyCLu25wqirs0pAPnvjvH4hV4Se7Kcpzmps'} onLoad={() => setIsGoogleMapsLoaded(true)}>\n                \n                <GoogleMap\n                    mapContainerClassName=\"crime-map-container\"\n                    center={mapCenter} // Default center (San Francisco)\n                    zoom={13}\n                    onClick={handleMapClick}\n                    onLoad={map => setMap(map)}\n                    options={{ \n                        styles: mapStyles, \n                        disableDoubleClickZoom: true,\n                        mapTypeControl: false,\n                        clickableIcons: false,\n                    }}\n                >\n                    <ReportForm/>\n\n                    {markerPosition && <Marker position={markerPosition} />}\n                    {locations.map((location, index) => (\n                        <Marker key={index} position={location} />\n                    ))}\n                </GoogleMap>\n            </LoadScript>\n\n        </div>\n    )\n}\nexport default CrimeMap;\n\n//  \n// Issues to fix after lunch. Fix how it looks in mobile. \n// Setup Database\n// Check for anymore other errors when using. \n// Retype each line of code so you remember how to use it. \n\n\n// 11/06\n// Google map markers completed. Database is setup. \n// Don't see apps on mobile device for some reason? ","/Users/davisnguyen/projects/crimecompass/frontend/src/redux/actions.ts",[],[],"/Users/davisnguyen/projects/crimecompass/frontend/src/components/ReportForm.tsx",["42","43","44","45"],[],"import React from 'react';\nimport { Button, TextField, Paper, Typography, Grid } from '@mui/material';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setDate, setTime, setLocation } from '../redux/actions';\nimport { ClassNames } from '@emotion/react';\nimport axios from 'axios'\n\nconst ReportForm: React.FC = () => {\n    const dispatch = useDispatch();\n\n    // Access state using useSelector\n    const date = useSelector((state: any) => state.form.date);\n    const time = useSelector((state: any) => state.form.time);\n    const location = useSelector((state: any) => state.form.location);\n\n    // Utility Functions to Dispatch Actions\n    const handleDateChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        dispatch(setDate(e.target.value));\n    };\n\n    const handleTimeChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        dispatch(setTime(e.target.value));\n    };\n\n    const handleLocationChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const [latitude, longitude] = e.target.value.split(',').map(coord => parseFloat(coord.trim()));\n\n    };\n\n    const handleSubmit = async (e: React.FormEvent) => {\n        e.preventDefault();\n        console.log(\"Date:\", typeof date);\n        console.log(\"Time:\", typeof time);\n        console.log(\"Location:\", typeof location);\n\n        console.log(\"Date:\", date);\n        console.log(\"Time:\", time);\n        console.log(\"Location:\", location);\n\n        const reportData = {\n            date: date,\n            time: time,\n            location: location,\n        };\n        \n        try {\n            const response = await axios.post('http://localhost:5038/todoappcollection', reportData);\n            console.log(response.data);\n\n            // Set state back to null\n\n            dispatch(setDate(\"\"));\n            dispatch(setTime(\"\"));\n            dispatch(setLocation(\"Select Location\"));\n\n        } catch (error) {\n\n        }\n\n    };\n\n\n    // Render Report Form\n    return (\n        //<Paper elevation={3} style={{ padding: '16px', borderRadius: '30px' }} className=\"report-form\">\n        <Paper elevation={3} className=\"report-form\" style={{ borderRadius: '20px'}}>    \n            {/* <Typography variant=\"h6\" gutterBottom>Report a Car Break-In</Typography> */}\n            <form onSubmit={handleSubmit}>\n                <Grid container spacing={3} alignItems='center' justifyContent='center' >\n                    <Grid item xs={12} sm={12} md={3} >\n                        <TextField\n                            label=\"Date\"\n                            type=\"date\"\n                            value={date}\n                            onChange={handleDateChange}\n                            style = {{ width: '100%'}}\n                            InputProps={{\n                                style: { \n                                    padding: '0px 10px',\n                                    fontSize: '0.8rem'\n                                }  \n                            }}\n                            fullWidth\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                        />\n                    </Grid>\n                    <Grid item xs={12} sm={12} md={2}>\n                        <TextField\n                            label=\"Time\"\n                            type=\"time\"\n                            value={time}\n                            onChange={handleTimeChange}\n                            fullWidth\n                            InputProps={{\n                                style: {\n                                    padding: '0px 10px',\n                                    fontSize: '0.8rem'\n                                }\n                            }}\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                        />\n                    </Grid>\n                    <Grid item xs={12} sm={12} md={5}>\n                        <TextField\n                            label=\"Location\"\n                            value={location}\n                            onChange={handleLocationChange}\n                            fullWidth\n                            InputProps={{\n                                style: {\n                                    padding: '0px 10px',\n                                    //width: '200px',\n                                    fontSize: '0.8rem'\n                                }\n                            }}\n                        />\n                    </Grid>\n                    <Grid item xs={12} sm={12} md={2} >\n                        <Button variant=\"contained\" color=\"primary\" type=\"submit\" \n                        >\n                            Report\n                        </Button>\n                    </Grid>\n                </Grid>\n            </form>\n        </Paper>\n\n    );\n}\n\nexport default ReportForm;\n",{"ruleId":"46","severity":1,"message":"47","line":3,"column":8,"nodeType":"48","messageId":"49","endLine":3,"endColumn":18},{"ruleId":"46","severity":1,"message":"50","line":26,"column":12,"nodeType":"48","messageId":"49","endLine":26,"endColumn":19},{"ruleId":"46","severity":1,"message":"51","line":2,"column":36,"nodeType":"48","messageId":"49","endLine":2,"endColumn":46},{"ruleId":"46","severity":1,"message":"52","line":5,"column":10,"nodeType":"48","messageId":"49","endLine":5,"endColumn":20},{"ruleId":"46","severity":1,"message":"53","line":26,"column":16,"nodeType":"48","messageId":"49","endLine":26,"endColumn":24},{"ruleId":"46","severity":1,"message":"54","line":26,"column":26,"nodeType":"48","messageId":"49","endLine":26,"endColumn":35},"@typescript-eslint/no-unused-vars","'ReportForm' is defined but never used.","Identifier","unusedVar","'address' is assigned a value but never used.","'Typography' is defined but never used.","'ClassNames' is defined but never used.","'latitude' is assigned a value but never used.","'longitude' is assigned a value but never used."]